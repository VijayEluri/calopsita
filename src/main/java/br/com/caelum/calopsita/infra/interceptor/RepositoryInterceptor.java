package br.com.caelum.calopsita.infra.interceptor;

import java.io.Serializable;
import java.lang.reflect.Field;

import javax.persistence.Id;

import net.vidageek.mirror.dsl.ClassController;
import net.vidageek.mirror.dsl.Matcher;
import net.vidageek.mirror.dsl.Mirror;

import org.hibernate.CallbackException;
import org.hibernate.EmptyInterceptor;
import org.hibernate.EntityMode;
import org.hibernate.type.Type;

import br.com.caelum.calopsita.infra.vraptor.Injector;
import br.com.caelum.vraptor.ioc.Component;

@Component
public class RepositoryInterceptor extends EmptyInterceptor {

	/**
	 * generated by eclipse
	 */
	private static final long serialVersionUID = 5848222336834528934L;

	private final Injector injector;

	public RepositoryInterceptor(Injector injector) {
		this.injector = injector;
	}

	@Override
	public Object instantiate(String className, EntityMode mode, Serializable id) throws CallbackException {
		ClassController<?> clazz = new Mirror().on(className);
		Object object = clazz.invoke().constructor().withoutArgs();
		injector.injectDependencies(object);

		Field field = clazz.reflectAll().fieldsMatching(new Matcher<Field>() {
			public boolean accepts(Field field) {
				return field.isAnnotationPresent(Id.class);
			}
		}).get(0);

		new Mirror().on(object).set().field(field).withValue(id);
		return object;
	}

	@Override
	public boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {
		return super.onLoad(entity, id, state, propertyNames, types);
	}

}
